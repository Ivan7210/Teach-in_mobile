from Socket import Socket
from datetime import datetime
import asyncio

class Client(Socket):
    def __init__(self):
        super(Client, self).__init__()
        self.messsages = ""
        self.token=None
    def setup(self):
        try:
            self.socket.connect(("armacoty.tk", 1234))
        except ConnectionRefusedError:
            print("Sorry server is offline")
            exit(0)
        # self.socket.setblocking(False)

    # ("192.168.43.98",1234) #global  ("127.0.0.1", 1234) #local host

    async def listen_socket(self, socket=None):
        while True:
            data = await self.main_loop.sock_recv(self.socket, 2048)
            self.messsages+=f"{datetime.now().date()} : {data.decode('utf-8')}\n"
            print(self.messsages)

    async def send_data(self, data=None):
        while True:
            data = await self.main_loop.run_in_executor(None, input)
            await self.main_loop.sock_sendall(self.socket, data.encode("utf-8"))

    async def main(self):
        data = await self.main_loop.run_in_executor(None, input)
        self.socket.send(data.encode("utf-8"))
        self.token=self.socket.recv(2048).decode("utf-8").split(":")
        if self.token[0] == "True":
            self.token=self.token[1:]
            listening = self.main_loop.create_task(self.listen_socket())
            sending = self.main_loop.create_task(self.send_data())
            await asyncio.gather(listening, sending)
        else:
            print("Sorry no")
            exit(0)


if __name__ == "__main__":
    client = Client()
    client.setup()
    client.start()